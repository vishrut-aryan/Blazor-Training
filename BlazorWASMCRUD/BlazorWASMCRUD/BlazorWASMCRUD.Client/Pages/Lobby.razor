@page "/tictactoe"
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<h3>Welcome to TicTacToe in Blazor</h3>

@if (currentRoom is null) {
    <input @bind="playerName" placeholder="Your Name" />
    <input @bind="currentRoomName" placeholder="Room Name" />
    <button @onclick="CreateRoom">Create Room</button>

    <h3>Rooms:</h3>
    <ul>
        @foreach (var room in rooms)
        {
            <li>@room.RoomName <button @onclick="() => JoinRoom(room.RoomId)">Join Room</button></li>
        }
    </ul>
}
else
{
    <CascadingValue Value="hubConnection">
        <Room CurrentRoom="currentRoom" />
    </CascadingValue>
}

@code {
    private HubConnection? hubConnection;
    private string playerName = string.Empty;
    private string currentRoomName = string.Empty;
    private GameRoom? currentRoom;
    private List<GameRoom> rooms = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<List<GameRoom>>("Rooms", (roomList) =>
        {
            Console.WriteLine($"We got rooms! Count = {roomList.Count}");
            rooms = roomList;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task CreateRoom()
    {
        if (hubConnection is null)
            return;

        currentRoom = await hubConnection.InvokeAsync<GameRoom>("CreateRoom", currentRoomName, playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (hubConnection is null)
            return;

        var joinedRoom = await hubConnection.InvokeAsync<GameRoom>("JoinRoom", roomId, playerName);

        if (joinedRoom is not null)
        {
            currentRoom = joinedRoom;
        }
        else
        {
            Console.WriteLine("Room is full or does not exist.");
        }
    }
}
